import asyncio
import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from config import TOKEN, YOUTUBE_API_KEY

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏(–∏–ª–∏) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ YouTube.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def send_help(message: Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /find_song –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ /find_channel –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ YouTube. –ù–∞–ø—Ä–∏–º–µ—Ä, /find_song Linkin Park. –ò–ª–∏ /find_channel –ê4.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_song
@dp.message(Command(commands=["find_song"]))
async def find_song_by_artist(message: Message):
    artist_name = message.text.replace("/find_song", "").strip()
    if not artist_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ /find_song –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, /find_song Linkin Park.")
    else:
        await handle_song_request(message, artist_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_channel
@dp.message(Command(commands=["find_channel"]))
async def find_channel_info(message: Message):
    channel_name = message.text.replace("/find_channel", "").strip()
    if not channel_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ /find_channel –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, /find_channel –ê4.")
    else:
        await handle_channel_request(message, channel_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ YouTube API
async def search_video_by_artist(artist_name: str):
    url = "https://www.googleapis.com/youtube/v3/search"
    params = {
        "part": "snippet",
        "q": artist_name,
        "type": "video",
        "videoCategoryId": "10",  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏
        "key": YOUTUBE_API_KEY,
        "maxResults": 1
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    videos = data.get("items", [])
                    if videos:
                        return videos[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
                    else:
                        return None
                else:
                    print(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞
async def get_most_popular_video(channel_id: str):
    url = "https://www.googleapis.com/youtube/v3/search"
    params = {
        "part": "snippet",
        "channelId": channel_id,
        "order": "viewCount",  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        "maxResults": 1,
        "key": YOUTUBE_API_KEY,
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    videos = data.get("items", [])
                    if videos:
                        video = videos[0]
                        return {
                            "title": video["snippet"]["title"],
                            "url": f"https://www.youtube.com/watch?v={video['id']['videoId']}"
                        }
                    else:
                        return None
                else:
                    print(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ YouTube
async def get_channel_info(channel_name: str):
    url = "https://www.googleapis.com/youtube/v3/search"
    params = {
        "part": "snippet",
        "q": channel_name,
        "type": "channel",
        "key": YOUTUBE_API_KEY,
        "maxResults": 1
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    channels = data.get("items", [])
                    if channels:
                        channel_id = channels[0]["id"]["channelId"]
                        return await get_channel_statistics(channel_id)
                    else:
                        return None
                else:
                    print(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
async def get_channel_statistics(channel_id: str):
    url = "https://www.googleapis.com/youtube/v3/channels"
    params = {
        "part": "statistics,snippet",
        "id": channel_id,
        "key": YOUTUBE_API_KEY,
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    channels = data.get("items", [])
                    if channels:
                        channel_info = channels[0]
                        stats = channel_info["statistics"]
                        most_popular_video = await get_most_popular_video(channel_info["id"])
                        return {
                            "title": channel_info["snippet"]["title"],
                            "video_count": stats["videoCount"],
                            "view_count": stats["viewCount"],
                            "most_popular_video": most_popular_video
                        }
                    else:
                        return None
                else:
                    print(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find_song
async def handle_song_request(message: Message, artist_name: str):
    video = await search_video_by_artist(artist_name)

    if video:
        video_id = video["id"]["videoId"]
        video_title = video["snippet"]["title"]
        video_url = f"https://www.youtube.com/watch?v={video_id}"
        await message.answer(f"üéµ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è {artist_name}:\n\n{video_title}\n\n‚ñ∂Ô∏è –°–ª—É—à–∞—Ç—å: {video_url}")
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è {artist_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find_channel
async def handle_channel_request(message: Message, channel_name: str):
    channel_info = await get_channel_info(channel_name)

    if channel_info:
        await message.answer(
            f"üì∫ –ö–∞–Ω–∞–ª: {channel_info['title']}\n"
            f"üé• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ: {channel_info['video_count']}\n"
            f"üëÅÔ∏è –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {channel_info['view_count']}\n"
            f"üî• –°–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤–∏–¥–µ–æ: {channel_info['most_popular_video']['title']}\n"
            f"‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞: {channel_info['most_popular_video']['url']}"
        )
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {channel_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.message.register(send_welcome, Command(commands=["start"]))
    dp.message.register(send_help, Command(commands=["help"]))
    dp.message.register(find_song_by_artist, Command(commands=["find_song"]))
    dp.message.register(find_channel_info, Command(commands=["find_channel"]))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
